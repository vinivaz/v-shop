// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String?     @unique
  description String
  category    String
  // stock       Int
  // price       Float
  mainImage   String?
  // additionalImages String[]
  variations  Variation[]
  createdAt   DateTime    @default(now())

  // averageRating  Float?   @default(0)
  // ratingCount    Int?     @default(0)

  favoritedBy Favorite[]
  OrderItem   OrderItem[]
  ratings     Rating[]
}

model Variation {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId

  main      Boolean     @default(false)
  name      String
  images    String[]
  price     Float
  stock     Int
  OrderItem OrderItem[]
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String    @unique
  password             String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  avatar               String?
  provider             String?

  favoritedBy Favorite[]
  orders      Order[]
  ratings     Rating[]
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  createdAt  DateTime    @default(now())
  totalPrice Float
  items      OrderItem[]
}

model OrderItem {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String     @db.ObjectId
  order       Order      @relation(fields: [orderId], references: [id])
  productId   String     @db.ObjectId
  variationId String     @db.ObjectId
  product     Product?   @relation(fields: [productId], references: [id])
  variation   Variation? @relation(fields: [variationId], references: [id])
  quantity    Int
  price       Float
}


model Rating {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  value       Float
  createdAt   DateTime    @default(now())

  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])

  productId   String      @db.ObjectId
  product     Product     @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}